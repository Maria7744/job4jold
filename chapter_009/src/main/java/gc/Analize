

Анализ проведен c использование профайлера(оценщика производительности программы) jconsole

При росте количество заявок в программе, произошло переполнение доступной памяти.
Была вызвана OutOfMemoryError heap space. Произошло переполнение heap созданными объектами.
Все потоки были остановлены, данные выгружены из памяти.

А что же происходит, если даже после выделения максимального объема памяти и ее п
олной чистки, места для новых объектов так и не находится? В этом случае мы ожидаемо
получаем java.lang.OutOfMemoryError: Java heap space и приложение прекращает работу, оставляя нам на память свою кучу в виде файла для анализа. Технически, это происходит в случае, если работа сборщика начинает занимать не
менее 98% времени и при этом сборки мусора освобождают не более 2% памяти
Мы уже коснулись того, что с помощью опций Xms и Xmx можно настроить начальный и
максимально допустимый размер кучи соответственно.
Существуют опции -XX:MinHeapFreeRatio=? и -XX:MaxHeapFreeRatio=?, которые задают минимальную и максимальную долю свободного места в каждом поколении, при достижении которой размер поколения будет автоматически увеличен или
 уменьшен соответственно. Например, если MinHeapFreeRatio=35